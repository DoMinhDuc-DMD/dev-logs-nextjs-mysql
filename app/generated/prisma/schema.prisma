generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                                               Int              @id @default(autoincrement())
  employee_name                                    String?          @db.VarChar(50)
  employee_code                                    String?          @unique @db.VarChar(50)
  employee_work_email                              String           @db.VarChar(50)
  employee_work_password                           String           @db.VarChar(50)
  employee_private_email                           String?          @db.VarChar(50)
  employee_phone_number                            String?          @db.VarChar(20)
  employee_birthday                                DateTime?        @db.Date
  employee_bank_account                            String?          @db.VarChar(30)
  employee_citizen_identification                  String?          @db.VarChar(30)
  employee_license_plate                           String?          @db.VarChar(30)
  role_id                                          Int
  role                                             role             @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "account_ibfk_1")
  devlog                                           devlog[]
  member_project                                   member_project[]
  notice_devlog_notice_devlog_employee_idToaccount notice_devlog[]  @relation("notice_devlog_employee_idToaccount")
  notice_devlog_notice_devlog_leader_idToaccount   notice_devlog[]  @relation("notice_devlog_leader_idToaccount")

  @@index([role_id], map: "role_id")
}

model devlog {
  id         Int      @id @default(autoincrement())
  hours      Int
  overtime   Boolean  @default(false)
  date       DateTime @db.Date
  note       String?  @db.Text
  account_id Int
  project_id Int
  task_id    Int
  account    account  @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "devlog_ibfk_1")
  project    project  @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "devlog_ibfk_2")
  task       task     @relation(fields: [task_id], references: [id], onDelete: Cascade, map: "devlog_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([project_id], map: "project_id")
  @@index([task_id], map: "task_id")
}

model member_project {
  id         Int     @id @default(autoincrement())
  account_id Int
  project_id Int
  account    account @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "member_project_ibfk_1")
  project    project @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "member_project_ibfk_2")

  @@index([account_id], map: "account_id")
  @@index([project_id], map: "project_id")
}

model notice_devlog {
  id                                         Int      @id @default(autoincrement())
  leader_id                                  Int
  employee_id                                Int
  project_id                                 Int
  date                                       DateTime @default(now()) @db.DateTime(0)
  notice_count                               Int
  account_notice_devlog_employee_idToaccount account  @relation("notice_devlog_employee_idToaccount", fields: [employee_id], references: [id], onDelete: Cascade, map: "notice_devlog_ibfk_1")
  account_notice_devlog_leader_idToaccount   account  @relation("notice_devlog_leader_idToaccount", fields: [leader_id], references: [id], onDelete: Cascade, map: "notice_devlog_ibfk_2")
  project                                    project  @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "notice_devlog_ibfk_3")

  @@index([employee_id], map: "employee_id")
  @@index([leader_id], map: "leader_id")
  @@index([project_id], map: "project_id")
}

model project {
  id             Int              @id @default(autoincrement())
  project_name   String           @db.VarChar(100)
  description    String?          @db.Text
  start_date     DateTime         @db.Date
  end_date       DateTime         @db.Date
  status         Boolean          @default(true)
  devlog         devlog[]
  member_project member_project[]
  notice_devlog  notice_devlog[]
  task           task[]
}

model role {
  id        Int       @id @default(autoincrement())
  role_name String    @db.VarChar(50)
  account   account[]
}

model task {
  id              Int      @id @default(autoincrement())
  task_name       String   @db.VarChar(100)
  task_name_index Int
  project_id      Int
  devlog          devlog[]
  project         project  @relation(fields: [project_id], references: [id], onDelete: Cascade, map: "task_ibfk_1")

  @@index([project_id], map: "project_id")
}
